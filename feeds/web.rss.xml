<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mojones.net</title><link>http://mojones.net/</link><description></description><atom:link href="http://mojones.net/feeds/web.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 09 Nov 2015 17:45:17 +0000</lastBuildDate><item><title>How to download all your photos from Flickr</title><link>http://mojones.net/how-to-download-all-your-photos-from-flickr.html</link><description>&lt;p&gt;A very short post because I had to download all my ~10,000 photos from Flickr recently and couldn't find a concise set of instructions for doing so. The question has been asked and answered many times on the web, but most of the advice revolves around using third-party services or desktop applications. &lt;/p&gt;
&lt;p&gt;I don't know when Flickr added the ability to download photos in bulk, but by far the easiest way is now definitely by using Flickr.com, no extra tools required. &lt;/p&gt;
&lt;h3&gt;Instructions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Log in to Flickr.&lt;/li&gt;
&lt;li&gt;Go go "Camera roll" (under &lt;strong&gt;You&lt;/strong&gt; in the menu or &lt;a href="https://www.flickr.com/cameraroll"&gt;click here&lt;/a&gt; ).&lt;/li&gt;
&lt;li&gt;Click the first photo to select it.&lt;/li&gt;
&lt;li&gt;Scroll down to the very bottom of the page (this will take a while if you have lots of photos).&lt;/li&gt;
&lt;li&gt;Hold down Shift and click on the very last photo. This will select everything between the first and last photo i.e. all of them.&lt;/li&gt;
&lt;li&gt;Click "Download" near the bottom of the page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have a large number of photos, they'll be split into multiple &lt;strong&gt;.zip&lt;/strong&gt; files. Download them one at a time and unzip them wherever you like. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin</dc:creator><pubDate>Mon, 09 Nov 2015 17:45:17 +0000</pubDate><guid>tag:mojones.net,2015-11-09:how-to-download-all-your-photos-from-flickr.html</guid><category>photos</category><category>flickr</category><category>bulk download</category></item><item><title>301 permanent redirect with Tomcat</title><link>http://mojones.net/301-permanent-redirect-with-tomcat.html</link><description>&lt;p&gt;Whenever I set up a new site, I want to make sure that example.com points to www.example.com. This is basic SEO – check out &lt;a href="https://web.archive.org/web/20100727065239/http://www.kalzumeus.com/2007/10/07/dont-make-my-really-elementary-seo-mistake/"&gt;this link&lt;/a&gt; for a quick explanation. I know that this is trivial to do in Apache, but for the sake of simplicity I wanted to use Tomcat only as my web server.&lt;/p&gt;
&lt;p&gt;After much searching around, it became clear that (1) Tomcat can’t do this and (2) I’m not the only person with this problem. The solution is a Java servlet filter called &lt;a href="https://web.archive.org/web/20100727065239/http://tuckey.org/urlrewrite/"&gt;URLRewriteFilter&lt;/a&gt;. It does the job perfectly, but it took me a while to get it set up right, so here’s a quick howto for anyone else in the same position.&lt;/p&gt;
&lt;p&gt;The instructions on the project’s homepage will get you most of the way there. You unzip the contents of the binary download (a single .jar and a config file) into your context’s directory, then add a servlet mapping to make sure that UrlRewriteFilter gets to handle all requests. Make sure that the UrlRewriteFilter servlet mapping goes at the top of the web.xml file, to ensure that the filter gets to see HTTP requests before any other servlet.&lt;/p&gt;
&lt;p&gt;The tricky part is getting the config file &lt;code&gt;WEB-INF/urlrewrite.xml&lt;/code&gt; just right, so here’s the configuration that worked for me:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;urlrewrite&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;seo redirect&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;condition&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;operator=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;notequal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;^www\.example\.com&lt;span class="nt"&gt;&amp;lt;/condition&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;from&amp;gt;&lt;/span&gt;^/(.*)&lt;span class="nt"&gt;&amp;lt;/from&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;to&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;permanent-redirect&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;last=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;http://www.example.com/$1&lt;span class="nt"&gt;&amp;lt;/to&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/urlrewrite&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;condition&lt;/code&gt; element tells us that we want to trigger this rule when the HTTP request host header is not equal to &lt;code&gt;www.example.com&lt;/code&gt;. Because it’s a regular expression, we escape the dots with backslashes (and use a start-anchor for good measure). The &lt;code&gt;from&lt;/code&gt; element uses parentheses to capture the whole of the path the the resource that’s being asked for, minus the starting forward slash. Of course, if the request is just for &lt;code&gt;example.com&lt;/code&gt; (probably the most common scenario) then this will be empty. The captured value is then used in the to element to construct that path for the redirect. So &lt;code&gt;example.com/tour.jsp&lt;/code&gt; should redirect to &lt;code&gt;www.example.com/tour.jsp&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;A quick update to mention a gotcha that I ran into; if you set up UrlRewriteFilter as described above then it will redirect you if you try to access your website on your development machine by going to &lt;code&gt;localhost:8080&lt;/code&gt;. This can lead to very frustrating scenarios involving repeatedly hitting F5 while muttering “why aren’t you showing my changes, dammit?” and failing to notice that the address bar reads &lt;code&gt;www.mywebsite.com&lt;/code&gt;. Because UrlRewriteFilter lets you have multiple conditions, it’s quite easy to get the correct behaviour:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;urlrewrite&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;seo redirect&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;condition&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;operator=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;notequal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;^www\.example\.com&lt;span class="nt"&gt;&amp;lt;/condition&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;condition&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;operator=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;notequal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;^localhost&lt;span class="nt"&gt;&amp;lt;/condition&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;from&amp;gt;&lt;/span&gt;^/(.*)&lt;span class="nt"&gt;&amp;lt;/from&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;to&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;permanent-redirect&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;last=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;http://www.example.com/$1&lt;span class="nt"&gt;&amp;lt;/to&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/urlrewrite&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin</dc:creator><pubDate>Wed, 04 Nov 2015 18:10:28 +0000</pubDate><guid>tag:mojones.net,2015-11-04:301-permanent-redirect-with-tomcat.html</guid><category>java</category><category>javascript</category><category>seo</category><category>servlets</category><category>http</category></item><item><title>How to fix an infinite 301 redirect loop in WordPress</title><link>http://mojones.net/how-to-fix-an-infinite-301-redirect-loop-in-wordpress.html</link><description>&lt;p&gt;I just ran into this problem today; thought I should post the solution in case anybody else finds themselves in the same boat.&lt;/p&gt;
&lt;p&gt;I moved a WordPress blog from one server to another which was running lighttpd with a blanket 301 redirect to from www to non-www URLs. When I fired up a browser to test it, I got the dreaded “this website is responding in a way that will never resolve” message. A quick look at the lighttpd logs confirmed that I was bouncing from &lt;strong&gt;www.example.com&lt;/strong&gt; to &lt;strong&gt;example.com&lt;/strong&gt; then back to &lt;strong&gt;www.example.com&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I expected the first redirect but not the second, and checking in my lighttpd conf showed no rule that could possibly be triggering it. Thinking maybe I had left a redirection plugin running, I logged on the blog (by temporarily disabling the redirect rules) and checked, but couldn’t find anything.&lt;/p&gt;
&lt;p&gt;Turns out that WordPress itself is capable of generating 301 redirects according to the “Blog URL” field in the General settings page. If the URL is set to &lt;strong&gt;http://www.example.com&lt;/strong&gt; and a request comes in for &lt;strong&gt;http://example.com/some/page&lt;/strong&gt;, then WordPress will automatically respond with a 301 redirect to &lt;strong&gt;http://www.example.com/some/page&lt;/strong&gt; (which in my case, would get caught by my lighttpd rule and bounced back to the original request URL, and so on).&lt;/p&gt;
&lt;p&gt;Moral of the story: make sure that your WordPress URL settings and any manual redirection you are carrying out are in agreement as to what the ‘correct’ URL should be!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin</dc:creator><pubDate>Wed, 04 Nov 2015 18:10:28 +0000</pubDate><guid>tag:mojones.net,2015-11-04:how-to-fix-an-infinite-301-redirect-loop-in-wordpress.html</guid><category>wordpress</category><category>web</category><category>config</category></item></channel></rss>