<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mojones.net</title><link href="http://mojones.net/" rel="alternate"></link><link href="http://mojones.net/feeds/all.atom.xml" rel="self"></link><id>http://mojones.net/</id><updated>2015-11-09T17:45:17+00:00</updated><entry><title>How dictionaries really work</title><link href="http://mojones.net/how-dictionaries-really-work.html" rel="alternate"></link><updated>2015-11-09T17:45:17+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-09:how-dictionaries-really-work.html</id><summary type="html">&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;This rather long post is my attempt to explain to novice programmers how hash tables work. A hash table is a data structure for storing key-value pairs and is part of the standard library of many languages. Depending on your language of choice, you might know hash tables as &lt;strong&gt;hashes&lt;/strong&gt;, &lt;strong&gt;HashMaps&lt;/strong&gt;, &lt;strong&gt;dictionaries&lt;/strong&gt;, &lt;strong&gt;dicts&lt;/strong&gt;, &lt;strong&gt;associative arrays&lt;/strong&gt;, or &lt;strong&gt;symbol tables&lt;/strong&gt;.Â &lt;/p&gt;
&lt;p&gt;If you're already familiar with hash tables, you'll probably spot many points in this post where I have either simplified things, or avoided talking about them entirely. If you think that any of these simplifications hinder rather than help understanding, then please leave a comment or drop me an email - I have not doubt that this post could probably be improved!&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;aside&gt;
&lt;p&gt;*The manager of the nightclub is a programmer, hence the zero-indexed numbering :-)&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Imagine that you have a job as a coat check attendant at a nightclub. The set up is pretty straightforward: you have a desk and one hundred coat hooks labeled from 0 to 99*. When a customer wants to drop off their coat, you put it on the lowest-numbered empty hook and give them a ticket with that number written on it. &lt;/p&gt;
&lt;p&gt;&lt;img alt="fig1" src="images/coat_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;When they want to pick up their coat, they give you the ticket, and you give them the coat from the corresponding hook.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fig1" src="images/coat_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;The system works nice and smoothly and allows customers to drop off and pick up their coats very efficiently. Let's say that the coat hooks are laid out in a sensible pattern that means that you can get to any given hook in two seconds. So the time it takes to drop off a coat is always two seconds - you can glance at the hooks, spot the next available one, and go directly to it. The time it takes to pick up a coat is also two seconds - the customer hands you their ticket, and you can go directly to the hook with that number.&lt;/p&gt;
&lt;h2&gt;The problem with this system&lt;/h2&gt;
&lt;p&gt;The only problem with this is that customers keep losing their tickets. Once somebody has lost their ticket, the whole system breaks down - the only way to reunite the customer with their coat is to get a description of it, then go hunting through all the coats currently on the rack to try to find it. Even if it only takes five seconds to compare a given coat to the customer's description, it also takes two seconds to get between hooks, for a total of seven seconds to check each coat. If all one hundred hooks are occupied, then on average you'll have to check fifty coats before you find the right one (assuming that the customer can give you an unambiguous description!), which means that it takes you three hundred and fifty seconds, or just under six minutes, to find a coat for which the customer has forgotten their ticket.&lt;/p&gt;
&lt;h2&gt;The name tag system&lt;/h2&gt;
&lt;p&gt;One night you decide that you've had enough - a whole bunch of customers lose their tickets, and you end up spending the whole night searching for coats that match some vague description. You decide to implement a new system: from now on, whenever you take a coat from a customer, you'll write their name down on a tag and attach it to the coat before you put it on a hook. &lt;/p&gt;
&lt;p&gt;&lt;img alt="fig1" src="images/coat_3.png" /&gt;&lt;/p&gt;
&lt;p&gt;Then, when a customer wants to pick up their coat, you can just ask them their name (surely they can't forget that!) and go through the coats one-at-a-time until you find the one with the correct name. &lt;/p&gt;
&lt;p&gt;&lt;img alt="fig1" src="images/coat_4.png" /&gt;&lt;/p&gt;
&lt;p&gt;We'll assume, for the purposes of this story, that you never get two customers with the same name.&lt;/p&gt;
&lt;p&gt;How does this new process compare to the old one, speed-wise? Let's say that it takes a couple of seconds to write the customers name down, so the total time it takes to drop off a coat is four seconds. Let's also say that it takes just one second to check the name on a tag, so it takes a total of three seconds to check a given coat to see if it belongs to a particular customer (one to check the name, and two to move between hooks). On average, you'll have to check fifty coats to find the correct one, so the average time to pick up a coat is two and a half minutes. This system isn't as fast as the numbered-ticket system if the customer has their ticket, but it's much faster than the numbered-tickets system if the customer loses their ticket!&lt;/p&gt;
&lt;h2&gt;The first letter system&lt;/h2&gt;
&lt;p&gt;One night when you are particularly bored, you start thinking about how your system could be improved - as it stands, the numbers on the hooks are kind of useless, since they don't correspond to any useful bit of information. You realize that you can actually fit more than one coat on each hook, and you wonder whether you might be able to use that fact to your advantage. You decide to try another new system: first you get some sticky labels and a pen, and you label the first 26 hooks with the 26 letters of the alphabet. When a customer drops off their coat, you will now use the first letter of their name to decide which hook to put it on - if their name begins with A you will put it on the first hook, if it begins with B on the second, etc. You'll still attach a name tag, just like before.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fig1" src="images/coat_5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here's where it gets interesting; when a customer comes to pick up their coat, you can now to straight to the hook which matches the first letter of their name, and start checking the coats on that hook to find the one with their name tag. &lt;/p&gt;
&lt;p&gt;&lt;img alt="fig1" src="images/coat_6.png" /&gt;&lt;/p&gt;
&lt;p&gt;It's likely that there will be more than one coat on the hook, but it's also likely that there will be far fewer than fifty, so this approach should still be a lot faster than the original name tag system. To figure out how much faster, though, will require a bit of work, because it depends on how many coats, on average, are on each hook which, in turn, depends on the distribution of names among your customers. In the worse-case scenario, all one hundred of your customers will have names that start with the same letter, so all one hundred coats will be on the same hook and you will be no better off than under the original system! In the best-case scenario, there will be around four customers whose name starts with each letter, so there'll be four coats per hook. The reality is likely to lie somewhere between the two.&lt;/p&gt;
&lt;p&gt;To figure out the expected distribution of coats across hooks, we'll use &lt;a href="http://names.mongabay.com/male_names.htm"&gt;this list of the 100 most common names in the US&lt;/a&gt; (you can, of course, substitute names from any country and get similar results). Here are the names as a list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;JAMES,JOHN,ROBERT,MICHAEL,WILLIAM,DAVID,RICHARD,CHARLES,JOSEPH,THOMAS,CHRISTOPHER,DANIEL,PAUL,MARK,DONALD,GEORGE,KENNETH,STEVEN,EDWARD,BRIAN,RONALD,ANTHONY,KEVIN,JASON,MATTHEW,GARY,TIMOTHY,JOSE,LARRY,JEFFREY,FRANK,SCOTT,ERIC,STEPHEN,ANDREW,RAYMOND,GREGORY,JOSHUA,JERRY,DENNIS,WALTER,PATRICK,PETER,HAROLD,DOUGLAS,HENRY,CARL,ARTHUR,RYAN,ROGER,JOE,JUAN,JACK,ALBERT,JONATHAN,JUSTIN,TERRY,GERALD,KEITH,SAMUEL,WILLIE,RALPH,LAWRENCE,NICHOLAS,ROY,BENJAMIN,BRUCE,BRANDON,ADAM,HARRY,FRED,WAYNE,BILLY,STEVE,LOUIS,JEREMY,AARON,RANDY,HOWARD,EUGENE,CARLOS,RUSSELL,BOBBY,VICTOR,MARTIN,ERNEST,PHILLIP,TODD,JESSE,CRAIG,ALAN, SHAWN,CLARENCE,SEAN,PHILIP,CHRIS,JOHNNY,EARL,JIMMY,ANTONIO
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll write a quick Python script to figure out the number of names that start with each letter. Don't worry if you can't read Python - we're only interested in the result. &lt;a href="static/names.txt"&gt;Click here&lt;/a&gt; to download the text file of names if you want to play along at home.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;letter_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;names.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;first_letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="n"&gt;letter_count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;first_letter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letter_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; : &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output from the script shows that, as we expected, the distribution of first letters is far from even:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;
&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;aside&gt;
&lt;p&gt;Derail for a future post: is there something about names beginning with J that make them particularly prone to being given diminutive versions? John/Johnny, Jerry/Jeremy, etc.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;The J's are particularly well-represented, partly thanks to diminutive versions of names being listed separately. Some letters, like X, Y and Z, aren't represented at all. Here's the distribution as a chart with letters along the bottom and counts up the side:&lt;/p&gt;
&lt;iframe width="600" height="300" frameborder="0" scrolling="no" src="https://plot.ly/~martin846/278.embed"&gt;&lt;/iframe&gt;

&lt;aside&gt;
&lt;p&gt;*Figuring out the expected average time across all customers is a bit involved, since we have to take into account that different letters will have to be checked different numbers of times, so for the purposes of this story, we'll just look at best- and worse-case scenarios.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;The patterns are pretty clear. What are the timings like under this new system? For a customer who's name begins with J, the outlook is not great. It takes two seconds to go to the correct hook, and one second to check each tag. If there are 17 coats on the hook, you'll have to check 8.5 of them on average before you find the right one, so the expected time to find the customers coat is 10.5 seconds. For a customer who's name begins with N, the story is better - it takes two seconds to go to the correct hook, and there's only a single coat so you don't even need to check the tag*.&lt;/p&gt;
&lt;p&gt;So, you go on using this new system. It's not quite as fast as a perfectly-working numbered-ticket system, but it's much faster than searching through the coats one-by-one, even for those unlucky customers who's name starts with J or R.&lt;/p&gt;
&lt;h2&gt;From letters to numbers&lt;/h2&gt;
&lt;p&gt;One evening you get to work after being on holiday for a week, only to find that somebody has removed your carefully written letter labels! You are halfway through making a new set of labels when you have a sudden realization - the labels on the hooks are not important. All that matters is that you have a consistent system for translating a name to a number, and that you use the same system to figure out the hook for both dropping coats off, and picking them up.&lt;/p&gt;
&lt;p&gt;So you write down on a bit of paper "A=0, B=1, C=2", etc. and pin it up next to your desk. Now when a customer drops off their coat, you just look up the appropriate number for the first letter of their name and put their coat on the hook with that number. &lt;/p&gt;
&lt;p&gt;&lt;img alt="fig1" src="images/coat_8.png" /&gt;&lt;/p&gt;
&lt;p&gt;When a customer comes to pick their coat up, you look up the number of the hook in exactly the same way.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fig1" src="images/coat_9.png" /&gt;&lt;/p&gt;
&lt;h2&gt;The first-two-letters system&lt;/h2&gt;
&lt;p&gt;Now that you've had your flash of insight about the unimportance of the labels, you start to wonder whether you could make things even faster by inventing a different system for translating names to numbers. After thinking for a while, you come up with two important criteria for such a system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The same name must always translate to the same number &lt;/li&gt;
&lt;li&gt;There should be an even distribution of coats across numbers, even if many of the names are similar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The current system - using the first letter of the name - satisfies the first criterion, but doesn't do very well on the second. Similar names - i.e. ones that start with the same letter - are translated to the same number, which results in a very uneven distribution. If we look at the chart showing the distribution of coats across hooks, but this time include all one hundred (including the empty ones), we can see how bad the current system is:&lt;/p&gt;
&lt;iframe width="600" height="300" frameborder="0" scrolling="no" src="https://plot.ly/~martin846/283.embed"&gt;&lt;/iframe&gt;

&lt;p&gt;Because it only takes into account the first letter of each name, it will never use any of the hooks above number 25. One possible improvement would be to add together the numbers for both the first &lt;strong&gt;and&lt;/strong&gt; second letters of each name. Here's a Python script that does just that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;number_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;letter2number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;letter2number&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;names.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;first_letter_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letter2number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;second_letter_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letter2number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;hook_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_letter_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;second_letter_number&lt;/span&gt;
    &lt;span class="n"&gt;number_count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hook_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; , &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, don't worry if you can't read the code - the important thing is the result:&lt;/p&gt;
&lt;iframe width="600" height="300" frameborder="0" scrolling="no" src="https://plot.ly/~martin846/289.embed"&gt;&lt;/iframe&gt;

&lt;p&gt;It's certainly an improvement on the first-letter-only system. Now the most crowded hook only has 9 coats on it (rather than 17) and a few more of the higher-numbered hooks are populated. But about half the hooks still have no coats at all on them at all.&lt;/p&gt;
&lt;p&gt;The next logical step is to also add on the number for the third letter, then the fourth, and so on. But it occurs to you that there is a couple of fundamental problems with this approach. At some point, you are going to get a summed number for the name that is greater than 99, at which point you won't be able to find a hook to hang the coat on. Also, the numbering approach you've been using so far doesn't do a great job of separating out names because it doesn't take into account the position of each letter. The letter C in a name results in adding 2 to the number regardless of whether it is the first letter, the last letter, or somewhere in the middle.&lt;/p&gt;
&lt;h2&gt;The all-letters system&lt;/h2&gt;
&lt;p&gt;Here's a way of solving the problem: multiply the number for each letter by its position in the name. So a letter C as the first character in the name would score 2, as the second character would score 4, etc. This should lead to a more even distribution across numbers- but how about names for which the score is greater than 99? Suddenly it occurs to you - just take the last two digits of the overall score and use that to determine the hook number. Here's some code that implements the scheme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;number_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;letter2number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;letter2number&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;names.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter2number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hook_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_number&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;number_count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hook_number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; , &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_count&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and here's the resulting distribution:&lt;/p&gt;
&lt;iframe width="600" height="300" frameborder="0" scrolling="no" src="https://plot.ly/~martin846/295.embed"&gt;&lt;/iframe&gt;

&lt;p&gt;This is clearly the best system yet! Under this scheme, the majority of hooks have one coat on them - just like we wanted - and there are relatively few empty ones. We won't bother going into the calculations, but it's clear from the chart that most of your customers will not have to wait very long to get their coats.&lt;/p&gt;
&lt;h2&gt;A general solution&lt;/h2&gt;
&lt;p&gt;Not long after you come up with this final scheme, you get a new job in a much bigger nightclub. This new nightclub has no fewer than one thousand coat hooks! On your first night working there you are nervous - how will your coat checking method work on such a large scale? - but you quickly find out that it works perfectly. All you have to do is take the last three digits of the score for a given name, rather than the last two.&lt;/p&gt;
&lt;h2&gt;Back to programming&lt;/h2&gt;
&lt;p&gt;Time to move from the story to reality and ask ourselves what any of this has to do with programming. Well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The customers (or rather their names) and their coats are &lt;strong&gt;keys&lt;/strong&gt; and &lt;strong&gt;values&lt;/strong&gt; respectively&lt;/li&gt;
&lt;li&gt;The process of dropping off a coat is equivalent to &lt;strong&gt;storing&lt;/strong&gt; a value in a hash&lt;/li&gt;
&lt;li&gt;The process of picking up a coat is equivalent to &lt;strong&gt;retrieving&lt;/strong&gt; a value from a hash&lt;/li&gt;
&lt;li&gt;The coat hooks are the equivalent of &lt;strong&gt;memory locations&lt;/strong&gt; (just as you can quickly pick up a coat off a given hook, the computer can quickly retrieve data from a given memory location)&lt;/li&gt;
&lt;li&gt;The process of converting a customer name (a key) into a hook number (a memory location) is the equivalent of a &lt;strong&gt;hash function&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;When two coats are put on the same hook (i.e. two customer names translate to the same hook number), this is equivalent to a &lt;strong&gt;hash collision&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The number of coat hooks is equivalent to the number of buckets in the hash. Just as in the code above, many real-life hash functions use the modulus operator to split items into a set number of buckets.&lt;/p&gt;
&lt;p&gt;The timings that I have used are an attempt to reflect what's going on in the computer, and to illustrate why hashes are extremely fast at inserting and retrieving data. Retrieving data from a specific memory location is very fast, just like going to a specific hook. Searching through a large number of unsorted pieces of data (like in the name tag system) is very slow. While in real life, calculating the hook number for a given name would probably be quite slow, even with a calculator, a computer can carry out a similar hash function very rapidly.&lt;/p&gt;
&lt;p&gt;Of course, most implementations of hash tables are more sophisticated that the outline we've drawn here. One big drawback of our coat-hook system is that we need to specify the number of hooks in advance, and to make sure that it's suitable for the number of items of data (coats!) we want to store. Real-life implementations are usually capable of dynamically altering the number of hooks (or memory locations), which makes them considerably more complex.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Image credits:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;coat by Rocky Xie from the Noun Project,
Hook by Thomas Hirter from the Noun Project,
Arrow by Pham Thi Dieu Linh from the Noun Project,
Ticket by Gonzalo Bravo from the Noun Project,
person by Alexander Smith from the Noun Project,
Tag by PeiYing Tang from the Noun Project,
speech-bubble by Olyn LeRoy from the Noun Project,
Arrow by Pham Thi Dieu Linh from the Noun Project&lt;/p&gt;</summary><category term="Python"></category><category term="language agnostic"></category><category term="hash"></category><category term="dict"></category><category term="associative array"></category></entry><entry><title>How to download all your photos from Flickr</title><link href="http://mojones.net/how-to-download-all-your-photos-from-flickr.html" rel="alternate"></link><updated>2015-11-09T17:45:17+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-09:how-to-download-all-your-photos-from-flickr.html</id><summary type="html">&lt;p&gt;A very short post because I had to download all my ~10,000 photos from Flickr recently and couldn't find a concise set of instructions for doing so. The question has been asked and answered many times on the web, but most of the advice revolves around using third-party services or desktop applications. &lt;/p&gt;
&lt;p&gt;I don't know when Flickr added the ability to download photos in bulk, but by far the easiest way is now definitely by using Flickr.com, no extra tools required. &lt;/p&gt;
&lt;h3&gt;Instructions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Log in to Flickr.&lt;/li&gt;
&lt;li&gt;Go go "Camera roll" (under &lt;strong&gt;You&lt;/strong&gt; in the menu or &lt;a href="https://www.flickr.com/cameraroll"&gt;click here&lt;/a&gt; ).&lt;/li&gt;
&lt;li&gt;Click the first photo to select it.&lt;/li&gt;
&lt;li&gt;Scroll down to the very bottom of the page (this will take a while if you have lots of photos).&lt;/li&gt;
&lt;li&gt;Hold down Shift and click on the very last photo. This will select everything between the first and last photo i.e. all of them.&lt;/li&gt;
&lt;li&gt;Click "Download" near the bottom of the page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have a large number of photos, they'll be split into multiple &lt;strong&gt;.zip&lt;/strong&gt; files. Download them one at a time and unzip them wherever you like. &lt;/p&gt;</summary><category term="photos"></category><category term="flickr"></category><category term="bulk download"></category></entry><entry><title>How to pick bad function and variable names</title><link href="http://mojones.net/how-to-pick-bad-function-and-variable-names.html" rel="alternate"></link><updated>2015-11-09T17:45:17+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-09:how-to-pick-bad-function-and-variable-names.html</id><summary type="html">&lt;p&gt;I teach a lot of beginner-targeted programming courses, and something that I've experimented with recently is trying to introduce the idea of self-documenting code early on in the learning process. I usually start off by talking about the difference between good and bad names for things (mostly functions and variables, though many of the same arguments apply to class names) , and I've noticed a few common patterns that tend to crop up in beginners code. I thought it might be useful to lay out these common errors in one place.&lt;/p&gt;
&lt;h2&gt;Single-letter names&lt;/h2&gt;
&lt;p&gt;OK, we're writing a program and we need to create a new variable, but we can't think of a good name....let's just start with `a and work our way through the alphabet. Later on we find that we have a bit of code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;acgatagc&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is well on its way to becoming completely incomprehensible. Sometimes single-letter names are the result of a desire to avoid typing or a worry about running out of space in your text editor. Neither of these are good enough reasons to write code as unreadable as the example above! Rest assured that using longer, more descriptive names will not make your program slow, or make any appreciable difference to the time it takes to type a line. Here's a sane version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dna&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;acgatagc&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;last_codon_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dna&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;protein&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;codon_start&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;last_codon_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;codon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dna&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;codon_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;codon_start&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;amino_acid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;genetic_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;protein&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;protein&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;amino_acid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which might now be interpretable as part of a program that translates DNA sequences.&lt;/p&gt;
&lt;p&gt;Sometimes we might want to use non-meaningful variable names to illustrate a very generic bit of code: for example, if we want to demonstrate how to append a value to a list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;aside&gt;
&lt;p&gt;*Delightfully, there are versions of these in many languagues - take a look &lt;a href="https://en.wikipedia.org/wiki/Metasyntactic_variable#Words_commonly_used_as_metasyntactic_variables"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;but for these purposes it's better to use the well-known set of &lt;a href="http://en.wikipedia.org/wiki/Metasyntactic_variable"&gt;metasyntatic variables&lt;/a&gt;*:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a couple of situations where single-letter variables do make sense; mostly where there are strong conventions for their use. For example, if we're writing a program to deal with Cartesian co-ordinates then I won't be too upset to see variables called &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; (though I might make a case for &lt;code&gt;x_pos&lt;/code&gt; and &lt;code&gt;y_pos&lt;/code&gt;). Similarly, &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are the traditional names for variables used as counters in a loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but remember that the most common use for these variables - to hold an index when iterating over a list - doesn't often occur in Python because we generally iterate over the elements of lists directly, in which case there's no excuse for not picking a meaningful variable name.&lt;/p&gt;
&lt;h2&gt;Naming thing after their type&lt;/h2&gt;
&lt;p&gt;This is a habit that people are most likely to fall into shortly after having learned of the existence of types, or shortly after having learned about a new type. The logic goes something like this: I've just been told that it's important to remember whether a variable is a string or a number, so I'll make that fact part of the name. This is not necessarily a terrible idea - in fact there is &lt;a href="http://en.wikipedia.org/wiki/Hungarian_notation"&gt;an entire system of variable naming&lt;/a&gt; based on it. Where it becomes a problem is when the type becomes the most important part of the name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;my_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Homo sapiens&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;the_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;a_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is obviously problematic: it's generally much more important to know what values are stored in a variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;minimum_name_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;species_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Homo sapiens&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;reading_frames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;input_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;aside&gt;
&lt;p&gt;*See &lt;a href="http://en.wikipedia.org/wiki/Duck_typing"&gt;Duck Typing&lt;/a&gt; for more on this.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;There's a more subtle problem with types-as-variable-names - the dynamic nature of Python means that it tends to work best when we worry about the various ways that a variable can be used, rather than its type*. It's this magic that allows us, for example, to iterate over lists, strings and files using a single syntax.&lt;/p&gt;
&lt;h2&gt;Extremely vague names&lt;/h2&gt;
&lt;p&gt;Often when we create a variable, or start writing a function, we're not exactly sure what its job is going to be in our program. This is especially true when we first start writing code. Unfortunately, this can lead to some very unhelpful variable names - examples I have seen in the wild include &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;output&lt;/code&gt;, &lt;code&gt;do_stuff()&lt;/code&gt;, &lt;code&gt;process_files()&lt;/code&gt;, &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, and &lt;code&gt;true_or_false&lt;/code&gt;. If you find yourself using a "placeholder" name like these during the process of coding, it's a good idea to go back and change them once you've figure out what the function or variable is actually doing.&lt;/p&gt;
&lt;h2&gt;Sequential names&lt;/h2&gt;
&lt;p&gt;This is a perennial problem in the world of naming, whether we are talking about Python variables or word processing files (how many people have a folder containing files with names like &lt;em&gt;final_draft.doc&lt;/em&gt;, &lt;em&gt;final_draft2.doc&lt;/em&gt;, &lt;em&gt;final_draft2.1.doc&lt;/em&gt;, &lt;em&gt;final_draft2_update.doc&lt;/em&gt;?) Thought of the perfect variable name, but then realized that you've already used it? No problem, just stick a "2" on the end of that bad boy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;albatross&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;word2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;word3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hopefully it's not necessary to point out why this can be confusing when you come back to read the code. We can rescue the above example in a couple of ways. One is to use more descriptive names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;albatross&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;uppercase_word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;punctuated_word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uppercase_word&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another way is to recognize that we're probably not going to use &lt;code&gt;word&lt;/code&gt; or &lt;code&gt;uppercase_word&lt;/code&gt; in our program, and just do the whole thing in one step:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;final_word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;albatross&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;aside&gt;
&lt;p&gt;*The idea of a &lt;a href="http://en.wikipedia.org/wiki/Namespace"&gt;namespace&lt;/a&gt; nicely captures this idea.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;When we find ourselves needing to create a new variable name by sticking a number onto the end of an existing one it's often a good indication that the code in question should be turned into a function. One of the great thing about encapsulation using functions is that they provide a way for multiple variables with the same name to happily co-exist in a program without interfering with each other*.&lt;/p&gt;
&lt;p&gt;An even worse version of sequential names is....&lt;/p&gt;
&lt;h2&gt;Re-using names&lt;/h2&gt;
&lt;p&gt;Thought of the perfect variable name but you've already used it? Never mind, just overwrite it! Often this is a symptom of variables names that are too general to begin with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# store a name&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Martin&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c"&gt;# now we need to store a last name&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Jones&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Re-using variables to store different things can make a program extremely difficult to understand. Solutions involve either using more descriptive names, which renders the above example fine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Martin&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Jones&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or splitting up the code into functions where the same variable name can be re-used without fear of confusion.&lt;/p&gt;
&lt;p&gt;Don't confuse the idea of re-using variables for a different type of data, as in the firstname/lastname example above, with the idea of changing the value that's stored in a variable, but keeping the type the same. For example, we often want to update a count, or append a character to a string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is fine, and doesn't count as re-use, because the variables are still storing the same thing.&lt;/p&gt;
&lt;h2&gt;Names that only vary by case or punctuation&lt;/h2&gt;
&lt;p&gt;How many different ways can we write essentially the same variable name?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mp3filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;mp3FileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;MP3FileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Mp3Filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;MP3FILENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;mp3_file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;mp3_FileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;MP3_Filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Mp3_FileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;MP3_FILE_Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quite apart from the Python style guidelines (all-caps names should be used only for global variables), using more than one of the above in a program will lead to madness.... don't do it!&lt;/p&gt;
&lt;h2&gt;Names copied from example code&lt;/h2&gt;
&lt;p&gt;This is a trap that's easy to fall into when working from examples in a course or a textbook. Imagine we are looking at a piece of example code that prints the number of each of the five vowels in a word:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;perspicacious&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;vowel&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;count for &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;vowel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowel&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Later on, we want to implement the same idea for counting the number of times each common word occurs in a sentence, so we copy and paste the example code and modify it. We replace the word with a sentence, and replace the vowels with words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;I think it was &amp;quot;Blessed are the cheesemakers&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;vowel&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;it&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;the&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;and&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;count for &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;vowel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vowel&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The program works, but the variable names are now very misleading - &lt;code&gt;word&lt;/code&gt; doesn't contain a word and &lt;code&gt;vowel&lt;/code&gt; doesn't contain a vowel. Using a piece of example code as a starting point for your ownpr ograms is an excellent way to learn - but be sure to go back once you've finished modifying it and check that the variable names still make sense.&lt;/p&gt;
&lt;p&gt;Anything I've missed, or that you disagree with? leave a comment!&lt;/p&gt;</summary><category term="Python"></category><category term="language agnostic"></category><category term="variables"></category><category term="naming things"></category></entry><entry><title>How to use jQuery to send JSON data to a Grails app</title><link href="http://mojones.net/how-to-use-jquery-to-send-json-data-to-a-grails-app.html" rel="alternate"></link><updated>2015-11-04T18:10:58+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:how-to-use-jquery-to-send-json-data-to-a-grails-app.html</id><summary type="html">&lt;p&gt;This took me a while to figure out, so here it is for anyone else whoâd like to know. Firstly, I was quite surprised to learn that jQuery doesnât have a built in method for turning objects into JSON, so youâll need the &lt;a href="https://web.archive.org/web/20130624115433/http://www.json.org/json2.js"&gt;JSON parser/creator&lt;/a&gt; from &lt;a href="https://web.archive.org/web/20130624115433/http://www.json.org/js.html"&gt;json.org&lt;/a&gt;. Then you can write your javascript POST function using the jQuery ajax method. Here Iâve left the content type as text/plain, which is not strictly correct but works with the Groovy code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;postTreeData&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;savedata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;contentType&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focused&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
        &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Data Saved: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And on the server end, hereâs the code from the relevant controller.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;savedata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;JSON&lt;/span&gt;
        &lt;span class="c1"&gt;// do something useful with the data&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;
         &lt;span class="o"&gt;}&lt;/span&gt;
         &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="groovy"></category><category term="grails"></category><category term="jquery"></category><category term="json"></category><category term="ajax"></category></entry><entry><title>Radial transparent gradients in Processing.org</title><link href="http://mojones.net/radial-transparent-gradients-in-processingorg.html" rel="alternate"></link><updated>2015-11-04T18:10:57+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:radial-transparent-gradients-in-processingorg.html</id><summary type="html">&lt;p&gt;Iâve been playing around a bit with Processing.org â a kinda-graphical programming language. One of the effect that I wanted to play with was a kind of radial transparency â  a blob of colour that faded out toward the edges. After playing around for a while with drawing multiple ellipses, I settled on a pixel-based subroutine. &lt;/p&gt;
&lt;p&gt;We create a new &lt;code&gt;PGraphics&lt;/code&gt; object to hold the blob, then for each pixel calculate the distance from the centre as a proportion of the radius using the handy &lt;code&gt;Math.hypot()&lt;/code&gt; method. Then, to get nice smooth fade-outs near the edges, we invert it to get the distance from the edge and then use the square of that value to determine the transparency. This gives a smoother effect â if we donât use the square then the edges donât transition smoothly (probably something to do with the sensitivity of human vision / LCD monitors to colour being non-linear). Anyway, hereâs the code:&lt;/p&gt;
&lt;p&gt;UPDATE â turns out that using &lt;code&gt;Math.hypot()&lt;/code&gt; is very slow â switching to &lt;code&gt;Math.sqrt()&lt;/code&gt; speeds up the code x10. The new code is below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;radialGradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;PGraphics&lt;/span&gt; &lt;span class="n"&gt;pg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createGraphics&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JAVA2D&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beginDraw&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;pg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;halfsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// calculate distance to center&lt;/span&gt;
      &lt;span class="c1"&gt;//float distance = (float) Math.hypot(i - size / 2, j - size / 2) / (size / 2);&lt;/span&gt;
      &lt;span class="c1"&gt;//float distance = (float) sqrt(sq(i-size/2) + sq(j-size/2)) / (size/2);&lt;/span&gt;
      &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;xDist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;halfsize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;yDist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;halfsize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xDist&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;xDist&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yDist&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;yDist&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;halfsize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;transparency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thisColour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transparency&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
      &lt;span class="n"&gt;pg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thisColour&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;pg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;endDraw&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;imageMode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CENTER&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="processing"></category><category term="computer art"></category></entry><entry><title>Hibernate magic with lazy evaluation</title><link href="http://mojones.net/hibernate-magic-with-lazy-evaluation.html" rel="alternate"></link><updated>2015-11-04T18:10:54+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:hibernate-magic-with-lazy-evaluation.html</id><summary type="html">&lt;p&gt;Iâve just run across this phenomenon for the first time and it turns out that hibernate can be even lazier than I thought!  To illustrate lets use this time-honoured example in Grails.  &lt;/p&gt;
&lt;p&gt;Here are our domain objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;  
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;belongsTo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;  
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;hasMany&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and weâll add some sample data in our &lt;code&gt;bootstrap.groovy&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;servletContext&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;alice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alice&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;  
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;book1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;book1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;book2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;book2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;alice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addToBooks&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;alice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addToBooks&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now weâll turn on SQL logging in &lt;code&gt;Datasource.groovy&lt;/code&gt;, so we can see exactly when hibernate is issuing SQL queries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;dbCreate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;create-drop&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;// one of &amp;#39;create&amp;#39;, &amp;#39;create-drop&amp;#39;,&amp;#39;update&amp;#39;  &lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jdbc:hsqldb:mem:devDB&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;loggingSql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now letâs create a controller to hold our test code (just for convenience, this could also be done in a groovy console):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;starting controller&amp;quot;&lt;/span&gt;  
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;alice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alice&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;author name is $alice.name&amp;quot;&lt;/span&gt;  
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;myBooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;books&lt;/span&gt;  
        &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;books are now stored in a variable&amp;quot;&lt;/span&gt;  
        &lt;span class="n"&gt;myBooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;each&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;  
        &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="n"&gt;myBooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;  
        &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;OK!&amp;quot;&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is pretty straightforward â weâre using a dynamic finder to retrieve the &lt;code&gt;Author&lt;/code&gt; we added in the bootstrap script, then getting the list of &lt;code&gt;Books&lt;/code&gt; and storing them in a variable, then printing the title of each book.&lt;/p&gt;
&lt;p&gt;Question: when do we expect to see the SQL query issued to retrieve the books? Grails uses lazy evaluation by default, so it wonât be at line 6, because we havenât actually asked for the &lt;code&gt;books&lt;/code&gt; field yet. I expected to see it at line 8 â here we are asking for the &lt;code&gt;books&lt;/code&gt; field, so surely this is where hibernate will retrieve them. I was wrong â in fact the books are not retrieved until line 10, where we actually want to do something with the books. The output make this clear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;starting controller  
Hibernate:  
select  
this_.id as id0_0_,  
this_.version as version0_0_,  
this_.name as name0_0_  
from  
author this_  
where  
this_.name=?  
author name is alice  
books are now stored in a variable  
Hibernate:  
select  
books0_.author_id as author3_1_,  
books0_.id as id1_,  
books0_.id as id1_0_,  
books0_.version as version1_0_,  
books0_.author_id as author3_1_0_,  
books0_.title as title1_0_  
from  
book books0_  
where  
books0_.author_id=?  
book2  
book1  
org.hibernate.collection.PersistentSet  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So hibernate does not actually execute the SQL query to get the books when we ask for &lt;code&gt;alice.books&lt;/code&gt;, but it is lazy enough to wait until we actually we try to iterate over the results. The last line of the output reveals how the magic happens â the object that &lt;code&gt;myBooks&lt;/code&gt; points to is not a straightforward &lt;code&gt;List&lt;/code&gt;, but a &lt;a href="https://web.archive.org/web/20130624115433/https://www.hibernate.org/hib_docs/v3/api/org/hibernate/collection/PersistentSet.html"&gt;&lt;code&gt;PersistentSet&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This caused me a fair amount of confusion when I was trying to optimise a Grails action by minimising the number of SQL queries issued when retrieving a large number of objects from a database. Now that I know the way that it really works, I find it both cool, and a little bit scary that this is going on behind the scenes. A nice illustration of the trade-offs involved in using an ORM framework.&lt;/p&gt;</summary><category term="grails"></category><category term="groovy"></category><category term="hibernate"></category><category term="lazyness"></category></entry><entry><title>Functional Abstraction examples from SCIP in Groovy</title><link href="http://mojones.net/functional-abstraction-examples-from-scip-in-groovy.html" rel="alternate"></link><updated>2015-11-04T18:10:51+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:functional-abstraction-examples-from-scip-in-groovy.html</id><summary type="html">&lt;p&gt;I've been checking out the legendary MIT &lt;a href="http://www.youtube.com/watch?v=2Op3QLzMgSY&amp;amp;feature=list_related&amp;amp;playnext=1&amp;amp;list=SPE18841CABEA24090"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt; course from 1986 on YouTube, and it's fascinating for many reasons, not least the hypnotic synthesized Bach that bookends each lecture. I don't think I will ever be able to hear &lt;em&gt;Jesu, joy of man's desiring&lt;/em&gt; again without seeing that purple wizard. What's really striking to me is how quickly the course gets into territory that I (coming from a self-taught Perl/Java background) think of as pretty advanced. In the first three lectures we are introduced to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recursive subroutines&lt;/li&gt;
&lt;li&gt;big-O notation&lt;/li&gt;
&lt;li&gt;passing functions around as variables&lt;/li&gt;
&lt;li&gt;building functions using higher-order programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I thought that the example used to illustrate higher-order programming was pretty cool, so I decided to see if I could implement it in Groovy. The example involves writing a function to calculate the square root of a number using the &lt;a href="http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method"&gt;Babylonian method &lt;/a&gt;- start with a guess and repeatedly average the guess with the number divided by the guess, until the answer is close enough.&lt;/p&gt;
&lt;p&gt;Here it is in Groovy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
        &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt;  
        &lt;span class="n"&gt;x&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqrt2&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guess is $guess&amp;quot;&lt;/span&gt;  
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="s"&gt;/ guess) + guess) /&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;sqrt2&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;sqrt2&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;guess is 1  
guess is 1.5  
guess is 1.41666666665  
guess is 1.414215686275 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've defined an &lt;code&gt;abs()&lt;/code&gt; closure because the built-in &lt;code&gt;.abs()&lt;/code&gt; method complains about different types of numbers. The &lt;code&gt;sqrt2()&lt;/code&gt; method itself is easy to read â given a guess, calculate how far off it is by squaring it, and either return the guess (it it's close enough) or use the averaging procedure to make a new guess and call &lt;code&gt;sqrt2()&lt;/code&gt; again. We could make it a bit more concise by leaving off the explicit return statements â a Groovy method returns the value of the last expression that was evaluated, so we don't really need them (this is what I've done with my &lt;code&gt;abs()&lt;/code&gt; method). Note that when we call the method in the last line, we have to supply it with an initial guess.&lt;/p&gt;
&lt;p&gt;The first step in abstraction is pretty obvious â let's do away with the hard-coded 2 and let the method take the number for which we want to take the square root as an argument.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqrt_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guess is $guess&amp;quot;&lt;/span&gt;  
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
        &lt;span class="n"&gt;guess&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;/ guess) + guess) /&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  
        &lt;span class="n"&gt;sqrt_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
    &lt;span class="n"&gt;sqrt_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make things a a little more convenient Iâve moved the iterative code to a closure called &lt;code&gt;sqrt_iter()&lt;/code&gt;; the job of &lt;code&gt;sqrt()&lt;/code&gt; now is just to supply the initial guess. Now we can ask for the square root of exotic numbers like five:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;guess is 1  
guess is 3  
guess is 2.33333333335  
guess is 2.238095238095  
guess is 2.2360688956435
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Up to this point thereâs no higher-order programming going on. But now it starts to get interesting; we can extract the bits of code that are responsible for checking if the answer is good enough and for generating the next guess:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;improve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;/ guess) + guess) /&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;goodEnough&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqrt_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guess is $guess&amp;quot;&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;goodEnough&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;  
        &lt;span class="n"&gt;guess&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;sqrt_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="n"&gt;sqrt_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, what we are left with in &lt;code&gt;sqrt_iter()&lt;/code&gt; is a generic procedure for solving a problem by generating successively better guesses until we get close enough. We can make this abstraction explicit by turning our improve / good enough methods into closures and having them as arguments to the main iteration method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sqrt_improve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
    &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;/ guess) + guess) /&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;sqrt_goodEnough&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generic_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;goodEnough&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guess is $guess&amp;quot;&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;goodEnough&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;  
        &lt;span class="n"&gt;guess&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;generic_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;goodEnough&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="n"&gt;generic_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt_goodEnough&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt_improve&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Iâve changed the names of the closures to make things clearer. &lt;code&gt;sqrt_improve()&lt;/code&gt; and &lt;code&gt;sqrt_goodEnough()&lt;/code&gt; are the particular type of &lt;code&gt;improve&lt;/code&gt; and &lt;code&gt;goodEnough&lt;/code&gt; routines that are for solving square roots. Our iteration routine is now a generic one that take four arguments â a closure that can tell if a guess is good enough; a closure that can improve an existing guess, a number for which weâre trying to find the answer, and a guess. Note that the &lt;code&gt;generic_iter()&lt;/code&gt; method now contains absolutely no logic to do with calculating square roots â it is completely generic. We can use it to solve any problem which we can express in terms of a way of checking if a guess is good enough, and a way of improving a guess.&lt;/p&gt;
&lt;p&gt;Hereâs a completely brain-dead example; using the &lt;code&gt;generic_iter()&lt;/code&gt; method to solve the problem of finding the smallest integer that is bigger than a given number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;biggerThan_improve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
    &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;biggerThan_goodEnough&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
   &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;biggerThan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="n"&gt;generic_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;biggerThan_goodEnough&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;biggerThan_improve&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;biggerThan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;improve&lt;/code&gt; closure just increments the guess by one; the good enough closure just checks whether the guess is bigger than the target number. The output is not particularly surprising:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;guess is 0  
guess is 1  
guess is 2  
guess is 3  
guess is 4  
guess is 5  
guess is 6 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One final point: because we can return closures as values from methods in Groovy, we can redefine &lt;code&gt;generic_iter&lt;/code&gt; so that rather than executing the iteration procedure, it returns it. So we can assign the result to another variable and use it later on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generic_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;goodEnough&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;  
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;returnClosure&lt;/span&gt;  
    &lt;span class="n"&gt;returnClosure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
        &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guess is $guess&amp;quot;&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;goodEnough&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;  
            &lt;span class="n"&gt;guess&lt;/span&gt;  
        &lt;span class="o"&gt;}&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;  
            &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;improve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;returnClosure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  
        &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generic_iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt_goodEnough&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt_improve&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that here we have to define &lt;code&gt;returnClosure&lt;/code&gt; before we assign a value to it, because we want to refer to it inside the closure body. &lt;code&gt;generic_iter&lt;/code&gt; now takes only two arguments â the two closures that will do the work â because its job is not to actually carry out the calculation, but to build the routine that will.&lt;/p&gt;</summary><category term="groovy"></category><category term="functional programming"></category><category term="higher order programming"></category><category term="recursion"></category><category term="sicp"></category></entry><entry><title>Extending Java number classes with random functions in Groovy</title><link href="http://mojones.net/extending-java-number-classes-with-random-functions-in-groovy.html" rel="alternate"></link><updated>2015-11-04T18:10:35+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:extending-java-number-classes-with-random-functions-in-groovy.html</id><summary type="html">&lt;p&gt;Recently Iâve been playing around quite a bit with &lt;a href="http://processing.org"&gt;Processing.org&lt;/a&gt;, and one of the things that I often want to do is add a bit of noise to variables that represent positions, sizes, colours, etc. Most of the Processing functions that actually draw something (like lines, ellipses, etc) take their arguments in the form of &lt;code&gt;floats&lt;/code&gt;, but most floating number operations in Java/Groovy return &lt;code&gt;BigDecimal&lt;/code&gt; data types so we have to use casts a lot. Also, thereâs no concise way to get a floating random number in a certain range that can be either negative or positive, so in order to randomly nudge a number up or down we end up with something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;myNoisyNumber&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is not exactly concise. If we want to call a Processing function that takes several such variables as arguments, then it gets worse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// draw a slightly-random ellipse&lt;/span&gt;
&lt;span class="n"&gt;ellipse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)+(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;()*&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;  
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)+(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;()*&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;  
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)+(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;()*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;  
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)+(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;()*&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thinking about a Groovy solution to the problem I remembered reading about the meta-programming features that let us dynamically add methods to core Java classes at runtime. So hereâs my solution â letâs modify the &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt; and &lt;code&gt;BigDecimal&lt;/code&gt; classes to include an extra method, &lt;code&gt;jiggle()&lt;/code&gt;, that will add or subtract a bit of random variation to the number and return it as a &lt;code&gt;float&lt;/code&gt;. Here is the magic code, that must be called at runtime (the &lt;code&gt;setup()&lt;/code&gt; method of a processing applet does the job very nicely):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;metaClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextBoolean&lt;/span&gt;&lt;span class="o"&gt;()){&lt;/span&gt;  
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;metaClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextBoolean&lt;/span&gt;&lt;span class="o"&gt;()){&lt;/span&gt;  
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;BigDecimal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;metaClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextBoolean&lt;/span&gt;&lt;span class="o"&gt;()){&lt;/span&gt;  
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;jiggle()&lt;/code&gt; method (actually it is a closure) itself is pretty straightforward. We take random number, scale it by the argument, invert it half the time, add it to the number, and cast the result to a &lt;code&gt;Float&lt;/code&gt; before returning it. &lt;/p&gt;
&lt;p&gt;Two things are of interest here; firstly, we need to have a &lt;code&gt;Random&lt;/code&gt; object called &lt;code&gt;random&lt;/code&gt; in the scope where this code is run (we could get round this by creating a new &lt;code&gt;Random&lt;/code&gt; object inside the closure, but I find it easier for debugging to have a single &lt;code&gt;Random&lt;/code&gt; object for the whole sketch, making it easy to reproduce). Secondly, when we want to refer to the object to which the closure belongs (i.e. the &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt; or &lt;code&gt;BigDecimal&lt;/code&gt;) we use &lt;code&gt;delegate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Having run this little snippet, our little ellipse example becomes much more concise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ellipse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and since we have ensured that all our new methods return &lt;code&gt;Floats&lt;/code&gt;, we can happily through any type of number we like into the mix and be sure that the jiggled number will come out OK. We can even make use of Groovyâs everything-is-an-object syntax to do cool stuff like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ellipse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.1415&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jiggle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.002&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="processing"></category><category term="groovy"></category><category term="java"></category><category term="computer art"></category><category term="metaprogramming"></category></entry><entry><title>Beware of the default acegi Grails plugin setup</title><link href="http://mojones.net/beware-of-the-default-acegi-grails-plugin-setup.html" rel="alternate"></link><updated>2015-11-04T18:10:32+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:beware-of-the-default-acegi-grails-plugin-setup.html</id><summary type="html">&lt;p&gt;This is firmly in the âputting it up here just in case anyone else has the same problemâ category.  There is a gotcha that bites when writing a Grails application that uses the acegi security plugin along with a postgresql database as the data source.  The problem is that the acegi plugin will, by default, create a domain class with the name &lt;code&gt;User&lt;/code&gt;.  When you try to run the application with a postgresql datasource, GORM will try to create a table with the name &lt;code&gt;user&lt;/code&gt;, which postgresql will not like as it is a reserved word.&lt;/p&gt;
&lt;p&gt;This is a particularly annoying bug, because &lt;code&gt;user&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a reserved word in other RDBMs, so the error will only become apparent when you switch from your development HSQLDB to postgres, by which time you will have have references to &lt;code&gt;Users&lt;/code&gt; scattered throughout your application.&lt;/p&gt;
&lt;p&gt;Thankfully, the fix is not too onerous; either rename your &lt;code&gt;User&lt;/code&gt; class to something else (and do a tentative find/replace in your code) or use a custom GORM table mapping:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;..&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;myappname_user&amp;#39;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="groovy"></category><category term="grails"></category><category term="webdev"></category><category term="postgresql"></category><category term="acegi"></category></entry><entry><title>How to drill holes in sea shells or sea glass</title><link href="http://mojones.net/how-to-drill-holes-in-sea-shells-or-sea-glass.html" rel="alternate"></link><updated>2015-11-04T18:10:31+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:how-to-drill-holes-in-sea-shells-or-sea-glass.html</id><summary type="html">&lt;p&gt;Time for a bit of non-photography craft now. I spent some time last night drilling a collection of shells and sea glass to make hanging decorations, and I had to search around a fair bit looking for instructions, so Iâm going to lay out how I did it to help other people in the same situation.
Before I start letâs just get this out of the way:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning! Drilling stuff is dangerous! If you accidentally drill a hole in your hand/get shell in your eye/inhale silica dust/lose your hearing using these instructions, I am not responsible!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;p&gt;Youâll need some sort of rotary tool. I used a Dremel, but there are many other brands which Iâm sure would work just as well.&lt;/p&gt;
&lt;p&gt;The choice of bit is far more important. You want a diamond wheel point bit â this is basically a shaft with a sphere on the end which is covered in tiny diamonds. The diamonds are hard enough to cut through the glass and shell. They come in various sizes; the 4.4mm one is the best one for this job â it makes a nice-sized hole for threading onto twine, etc. but more importantly, itâs the only one where the cutting bit is smaller than the shaft:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo" src="http://i.imgur.com/vmxLeLy.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;This is important, because it means that once youâve drilled your hole, it doesnât matter if you accidentally keep pushing and push the shaft through the hole you have just made. In contrast, if you use one of the smaller bits, the shaft will not fit through the hole, and if you donât stop as soon as the hole has been drilled, the conical bit of the shaft will crash into the edges of the hole and probably make a mess.&lt;/p&gt;
&lt;p&gt;The 4.4mm diamond bit has a 2.4mm collet, which I think is not the one that you get when you buy a Dremel. So youâll need to buy the right sized collet as well. Might as well get the set, theyâre cheap.&lt;/p&gt;
&lt;p&gt;To replace the collet thatâs currently in the Dremel with the right-sized one, just unscrew the chuck all the way and the collet will drop out.
Youâll also want a shallow container, since the actual cutting needs to be done under water to stop the shell and drill from overheating. A shallow plastic food tray will do the trick.&lt;/p&gt;
&lt;p&gt;Ear and eye protection would also be a good idea. You probably got a pair of safety goggles when you bought your roatary tool, so thereâs no excuse for not wearing them. Also, you wonât believe how loud this tiny drill gets when youâre cutting your way through a thick shell or piece of glass. Itâs like a dentistâs drill but much louder. So wear earmuffs if youâve got them.  If you have a dust mask, use it too. There shouldnât be a much of an issue with dust for this particular job, as all the cutting will be done under water, but itâs a good habit to have.&lt;/p&gt;
&lt;h2&gt;Technique&lt;/h2&gt;
&lt;p&gt;Take your shell or bit of glass and figure out where youâre going to drill your hole. Hold it at the bottom of your shallow container and figure out where the water level needs to be. This is the only tricky part of this job; you have to get the water level so that the bit of the shell youâre drilling is completely covered, but making sure that the drill itself doesnât go in the water. &lt;/p&gt;
&lt;p&gt;You want the water to come about half way up the shaft of the drill bit. If you have a bunch of shells to drill, you can put a bit of tile or spare shell underneath smaller shells to raise them up â that way you wonât be topping up or emptying the water every 30 seconds.&lt;/p&gt;
&lt;p&gt;Once you have the water level correct, start drilling. Figure out how you are going to hold the shell steady in such a way that you donât drill into your hand. Because the speed of the drill is so high, there isnât much torque, but thereâs still enough to spin the shell around if you donât steady it. Be sure to start the drill before itâs touching the surface of the shell â if you start it when the bit is in contact with the shell it will just skid off. Use the slowest setting and donât apply very much force â let the drill bit do the work.&lt;/p&gt;
&lt;p&gt;Youâll be able to feel once the drill bit has broken through. Turn off the drill and wait for it to come to a stop before lifting the shell off the shaft. If you just pull the drill out while itâs still spinning, the cutting bit will nick the edges of the hole and make a mess.&lt;/p&gt;
&lt;p&gt;If you have a very delicate shell with multiple layers, the underneath of the hole might be messy. The trick to drilling a nice neat hole in shells like this is to drill until the hole has just broken through the back side, then turn the shell over and widen the hole by drilling from the other side. This technique is very time-consuming, as you have to keep stopping to check the depth of the hole, so only use it if you have to.&lt;/p&gt;
&lt;p&gt;Remember to change the cooling water when it gets too cloudy to see. You donât want to be plunging your drill into the murky depths only to find out that youâve drilled through the bottom of your container, or your table. Also, if you have a bit batch of shells to drill, you might want to stop every few minutes and let the drill cool down.&lt;/p&gt;
&lt;p&gt;Thatâs pretty much it â if you have questions, just leave them in the comments.&lt;/p&gt;</summary><category term="craft"></category><category term="diy"></category><category term="glass"></category><category term="shells"></category></entry><entry><title>How to build a high-quality audio system in Ubuntu</title><link href="http://mojones.net/how-to-build-a-high-quality-audio-system-in-ubuntu.html" rel="alternate"></link><updated>2015-11-04T18:10:30+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:how-to-build-a-high-quality-audio-system-in-ubuntu.html</id><summary type="html">&lt;p&gt;Note: this post is about high-quality audio under Linux; however, the set-up will work just as well on a Windows or Mac machine.&lt;/p&gt;
&lt;p&gt;Historically, sound has always been a weak point for Linux, with many devices refusing to work due to a lack of drivers. The appearance of Ubuntu improved matters, but I have always found support for high-quality audio to be lacking. However, the development of USB sound cards has made a big difference and I have finally found a way to get high-quality audio on Ubuntu on a budget. The set up Iâm about to describe will give you fantastic, detailed sound for music listening for around $200.  Briefly, the recipe is&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use an external USB soundcard&lt;/li&gt;
&lt;li&gt;get a line-out signal from the soundcard and&lt;/li&gt;
&lt;li&gt;use active monitor speakers, NOT multimedia speakers&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The sound card&lt;/h2&gt;
&lt;p&gt;There are two main reasons to use a USB sound card. Firstly it means that the digital-to-analog conversion is taking place outside the computer, where it canât be affected by all the electrical noise inside. Secondly, the quality of the conversion (which will ultimately determine the quality of the sound) is far better than can be achieved by your computerâs built-in sound card.&lt;/p&gt;
&lt;p&gt;The best low-cost USB audio device I have found is the FIIO E7. Itâs actually designed and marketed as a headphone amplifier, but itâs perfect for our purposes because itâs actually a high-quality USB soundcard as well. It is recognized by Ubuntu as a USB audio device so it doesnât need any drivers and will work out of the box.&lt;/p&gt;
&lt;h2&gt;The line-out signal&lt;/h2&gt;
&lt;p&gt;Because the E7 is designed to drive headphones, you canât take the output and use it to drive a pair of speakers. Instead you need to get a line-out signal which you can feed to an amplifier. There are two products that let you get a line out signal from the E7 â a rather cool looking separate headphone amp, and a line out dock. The headphone amp looks extremely cool, but will set you back another hundred bucks and take up a chunk of space on your desk.  The line out kit (called the L7), on the other hand, costs ten bucks and does the job perfectly.&lt;/p&gt;
&lt;p&gt;It clips to the bottom of the E7, then you plug a USB cable in one side, and get a line out signal from the other side. This will allow us to use the DAC part of the E7 while bypassing the amplifier part.&lt;/p&gt;
&lt;h2&gt;Active monitors&lt;/h2&gt;
&lt;p&gt;Now you have your line-out signal you need a amplifier and a pair of speakers. The best value solution is a pair of active speakers (also called powered speakers); these have an integrated amplifier so you can connect them directly to a line out source. Active speakers come in two main flavours. Multimedia speakers are designed for computer games and movies, so they tend to be loud and dynamic, but are lacking in detail for music. A much better choice is a set of monitor speakers; these are specifically designed to accurately reproduce music and are often used for recording and mixing.&lt;/p&gt;
&lt;p&gt;M-audio make a few models of budget speakers that are ideal for our purposes. I am currently using a pair of AV40 speakersï¿¼ . They are nicely sized, comfortably loud enough to fill a large room and have wonderful sound reproduction.&lt;/p&gt;
&lt;h2&gt;Setting up&lt;/h2&gt;
&lt;p&gt;Hooking up a system like the one Iâve described above is very simple. The L7 plus into the bottom of the E7, then the USB cable runs from the L7 to your computer. The line out cable runs from the other side of the L7 to the active speakers. Be sure to arrange your speakers for best sound from your normal listening position â follow &lt;a href="https://web.archive.org/web/20120127175411/http://www.tweakshop.com/Speaker%20Placement.html"&gt;a guide like this one&lt;/a&gt; and you canât go wrong.&lt;/p&gt;
&lt;p&gt;A set up like this should keep you happy for a long time; the only thing I have found I needed to upgrade is the line out cable which goes between the L7 and the speakers. The supplied one is a little loose, but even a high-quality gold-plated, shielded cable is only about $10, will sound great, and will last practically forever.&lt;/p&gt;</summary><category term="audio"></category><category term="hardware"></category><category term="ubuntu"></category><category term="linux"></category></entry><entry><title>301 permanent redirect with Tomcat</title><link href="http://mojones.net/301-permanent-redirect-with-tomcat.html" rel="alternate"></link><updated>2015-11-04T18:10:28+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:301-permanent-redirect-with-tomcat.html</id><summary type="html">&lt;p&gt;Whenever I set up a new site, I want to make sure that example.com points to www.example.com. This is basic SEO â check out &lt;a href="https://web.archive.org/web/20100727065239/http://www.kalzumeus.com/2007/10/07/dont-make-my-really-elementary-seo-mistake/"&gt;this link&lt;/a&gt; for a quick explanation. I know that this is trivial to do in Apache, but for the sake of simplicity I wanted to use Tomcat only as my web server.&lt;/p&gt;
&lt;p&gt;After much searching around, it became clear that (1) Tomcat canât do this and (2) Iâm not the only person with this problem. The solution is a Java servlet filter called &lt;a href="https://web.archive.org/web/20100727065239/http://tuckey.org/urlrewrite/"&gt;URLRewriteFilter&lt;/a&gt;. It does the job perfectly, but it took me a while to get it set up right, so hereâs a quick howto for anyone else in the same position.&lt;/p&gt;
&lt;p&gt;The instructions on the projectâs homepage will get you most of the way there. You unzip the contents of the binary download (a single .jar and a config file) into your contextâs directory, then add a servlet mapping to make sure that UrlRewriteFilter gets to handle all requests. Make sure that the UrlRewriteFilter servlet mapping goes at the top of the web.xml file, to ensure that the filter gets to see HTTP requests before any other servlet.&lt;/p&gt;
&lt;p&gt;The tricky part is getting the config file &lt;code&gt;WEB-INF/urlrewrite.xml&lt;/code&gt; just right, so hereâs the configuration that worked for me:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;urlrewrite&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;seo redirect&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;condition&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;operator=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;notequal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;^www\.example\.com&lt;span class="nt"&gt;&amp;lt;/condition&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;from&amp;gt;&lt;/span&gt;^/(.*)&lt;span class="nt"&gt;&amp;lt;/from&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;to&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;permanent-redirect&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;last=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;http://www.example.com/$1&lt;span class="nt"&gt;&amp;lt;/to&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/urlrewrite&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;condition&lt;/code&gt; element tells us that we want to trigger this rule when the HTTP request host header is not equal to &lt;code&gt;www.example.com&lt;/code&gt;. Because itâs a regular expression, we escape the dots with backslashes (and use a start-anchor for good measure). The &lt;code&gt;from&lt;/code&gt; element uses parentheses to capture the whole of the path the the resource thatâs being asked for, minus the starting forward slash. Of course, if the request is just for &lt;code&gt;example.com&lt;/code&gt; (probably the most common scenario) then this will be empty. The captured value is then used in the to element to construct that path for the redirect. So &lt;code&gt;example.com/tour.jsp&lt;/code&gt; should redirect to &lt;code&gt;www.example.com/tour.jsp&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;A quick update to mention a gotcha that I ran into; if you set up UrlRewriteFilter as described above then it will redirect you if you try to access your website on your development machine by going to &lt;code&gt;localhost:8080&lt;/code&gt;. This can lead to very frustrating scenarios involving repeatedly hitting F5 while muttering âwhy arenât you showing my changes, dammit?â and failing to notice that the address bar reads &lt;code&gt;www.mywebsite.com&lt;/code&gt;. Because UrlRewriteFilter lets you have multiple conditions, itâs quite easy to get the correct behaviour:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;urlrewrite&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rule&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;seo redirect&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;condition&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;operator=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;notequal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;^www\.example\.com&lt;span class="nt"&gt;&amp;lt;/condition&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;condition&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;host&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;operator=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;notequal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;^localhost&lt;span class="nt"&gt;&amp;lt;/condition&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;from&amp;gt;&lt;/span&gt;^/(.*)&lt;span class="nt"&gt;&amp;lt;/from&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;to&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;permanent-redirect&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;last=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;http://www.example.com/$1&lt;span class="nt"&gt;&amp;lt;/to&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/urlrewrite&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="java"></category><category term="javascript"></category><category term="seo"></category><category term="servlets"></category><category term="http"></category></entry><entry><title>How to fix an infinite 301 redirect loop in WordPress</title><link href="http://mojones.net/how-to-fix-an-infinite-301-redirect-loop-in-wordpress.html" rel="alternate"></link><updated>2015-11-04T18:10:28+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:how-to-fix-an-infinite-301-redirect-loop-in-wordpress.html</id><summary type="html">&lt;p&gt;I just ran into this problem today; thought I should post the solution in case anybody else finds themselves in the same boat.&lt;/p&gt;
&lt;p&gt;I moved a WordPress blog from one server to another which was running lighttpd with a blanket 301 redirect to from www to non-www URLs. When I fired up a browser to test it, I got the dreaded âthis website is responding in a way that will never resolveâ message. A quick look at the lighttpd logs confirmed that I was bouncing from &lt;strong&gt;www.example.com&lt;/strong&gt; to &lt;strong&gt;example.com&lt;/strong&gt; then back to &lt;strong&gt;www.example.com&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I expected the first redirect but not the second, and checking in my lighttpd conf showed no rule that could possibly be triggering it. Thinking maybe I had left a redirection plugin running, I logged on the blog (by temporarily disabling the redirect rules) and checked, but couldnât find anything.&lt;/p&gt;
&lt;p&gt;Turns out that WordPress itself is capable of generating 301 redirects according to the âBlog URLâ field in the General settings page. If the URL is set to &lt;strong&gt;http://www.example.com&lt;/strong&gt; and a request comes in for &lt;strong&gt;http://example.com/some/page&lt;/strong&gt;, then WordPress will automatically respond with a 301 redirect to &lt;strong&gt;http://www.example.com/some/page&lt;/strong&gt; (which in my case, would get caught by my lighttpd rule and bounced back to the original request URL, and so on).&lt;/p&gt;
&lt;p&gt;Moral of the story: make sure that your WordPress URL settings and any manual redirection you are carrying out are in agreement as to what the âcorrectâ URL should be!&lt;/p&gt;</summary><category term="wordpress"></category><category term="web"></category><category term="config"></category></entry><entry><title>A pitfall to avoid when using the Grails UIPerformance plugin</title><link href="http://mojones.net/a-pitfall-to-avoid-when-using-the-grails-uiperformance-plugin.html" rel="alternate"></link><updated>2015-11-04T18:10:28+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:a-pitfall-to-avoid-when-using-the-grails-uiperformance-plugin.html</id><summary type="html">&lt;p&gt;A quick warning to anyone whoâs using the excellent &lt;a href="https://grails.org/plugin/ui-performance"&gt;UIPerformance&lt;/a&gt; plugin for grails:  donât do what I did, and set up your bundles with identical names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;uiperformance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;

    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bundled&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;files:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;jquery.jcarousel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]],&lt;/span&gt;

    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;js&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bundled&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;files:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;jquery-1.3.2.min&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;simpla.jquery.configuration&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;facebox&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;jquery.jcarousel.pack&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;cert&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unsurprisingly, this causes the plugin to get confused; the following works much better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;uiperformance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bundles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;

    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bundled_css&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;files:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reset&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;style&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;jquery.jcarousel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]],&lt;/span&gt;

    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;js&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bundled_javascript&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;files:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;jquery-1.3.2.min&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;simpla.jquery.configuration&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;facebox&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;jquery.jcarousel.pack&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;cert&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="groovy"></category><category term="grails"></category><category term="UIPerformance"></category><category term="schoolboy error"></category></entry><entry><title>How to remove a broken or stripped screw: ultimate protip collection!</title><link href="http://mojones.net/how-to-remove-a-broken-or-stripped-screw-ultimate-protip-collection.html" rel="alternate"></link><updated>2015-11-04T18:10:20+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:how-to-remove-a-broken-or-stripped-screw-ultimate-protip-collection.html</id><summary type="html">&lt;p&gt;I was inspired to put this post together when searching for ways to remove a broken screw recently â there are so many different tricks that I thought it would be fun to collect them all in the same place. I have tried to put them in order of try-ability, with those that use tools you probably already have at the top.&lt;/p&gt;
&lt;p&gt;First of all, are you dealing with a stripped screw or a broken one? A stripped screw is where the slots in the head have become worn and rounded so that the screwdriver canât grip it and looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://web.archive.org/web/20120127184439im_/http://redrowstudio.com/wp-content/uploads/2011/12/stripped.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;A broken screw is one where the head has sheared off, and looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://web.archive.org/web/20120127184439im_/http://redrowstudio.com/wp-content/uploads/2011/12/Kozzi-broken-screw-441x294.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;If you have a broken screw then the techniques for dealing with a stripped screw wonât help you, so jump down to the methods for broken screws. On the other hand, if you have a stripped screw, then you can use any of the techniques on this page so just start reading.&lt;/p&gt;
&lt;h2&gt;Methods for stripped screws&lt;/h2&gt;
&lt;h3&gt;Tap or heat the screw to loosen&lt;/h3&gt;
&lt;p&gt;The idea here is to loosen the screw so that you can use what little grip remains in the head to unscrew it. Tapping can help to free a seized screw, while heating a metal screw can loosen it by making the metal expand then contract. To loosen the screw by tapping, place the tip of a screwdriver in the screw head (as if you were going to turn it) then tap the butt of the screwdriver with a hammer. To loosen it by heating, place the tip of a hot soldering iron in the screw head and press down for a few seconds.&lt;/p&gt;
&lt;h3&gt;Drill a small hole in the centre of the screw&lt;/h3&gt;
&lt;p&gt;By drilling a hole just a couple of millimetres deep in the middle of the screw head, you can allow the tip of your screwdriver to go deeper in the head and get a little bit more grip. Use a very small drill bit that will work on metal. &lt;/p&gt;
&lt;h3&gt;Use a rubber band to get more grip&lt;/h3&gt;
&lt;p&gt;This one is simple; just place a rubber band over the screw head and unscrew it normally. The rubber can help to give just enough extra grip to get the screw to turn.&lt;/p&gt;
&lt;h3&gt;Use aluminium carbide or valve grinding paste&lt;/h3&gt;
&lt;p&gt;The idea here is the same as above â give the screwdriver a little more grip on the screw head. Just spread a little of the paste into the slots in the screw head and unscrew as normal.&lt;/p&gt;
&lt;h3&gt;Use a hammer to reshape the slots in the screw head&lt;/h3&gt;
&lt;p&gt;An unsophisticated trick :-) Seat the tip of a screwdriver in the screw head and whack the base of the screwdriver with a hammer. This is only likely to work on screws made out of soft metal (but hey, maybe thatâs the reason they get stripped in the first place!)&lt;/p&gt;
&lt;h3&gt;Use a flat-head screwdriver on a cross-head screw&lt;/h3&gt;
&lt;p&gt;Sometimes a flat-head screwdriver can get a better grip on a stripped cross-head screw than the correct screwdriver can get, due to the way that cross-head screws are designed to âcam-outâ. Use plenty of pressure to keep the screwdriver seated.&lt;/p&gt;
&lt;h3&gt;Use a screwdriver that's too big&lt;/h3&gt;
&lt;p&gt;Very similar to the trick above. Instead of using a flat-head screwdriver, use a cross-head screwdriver, but pick a size thatâs too big for the screw. If the slots have been worn, this can often give a better grip than using the correct size.&lt;/p&gt;
&lt;h3&gt;Use a steel punch to hit the screw off-centre&lt;/h3&gt;
&lt;p&gt;This is only likely to work on screws that have a large head. Take a small hardened steel punch and use it to hit the screw off-centre so that it rotates anti-clockwise. This sometimes works to start a screw moving; as soon as itâs loosened, move on to one of the other methods.&lt;/p&gt;
&lt;h2&gt;Methods for broken screws&lt;/h2&gt;
&lt;h3&gt;Grip the screw with a pair of pliers and turn it&lt;/h3&gt;
&lt;p&gt;If the screw isnât secured too tightly, and thereâs enough of it protruding, you may be able to get enough purchase with a normal pair of pliersï¿¼ to remove it. Be sure to clamp the screw in the sample place with the pliers each time you grip it so you donât round off the screw.&lt;/p&gt;
&lt;p&gt;Of course, the more leverage you can get to grip the screw with the better, so if youâve got a pair of pliers with long handles and an adjustable jaw, then use them. And if you are lucky enough to have a pair of locking pliers (AKA vise grips, vice grips, or mole grips, depending on where you live) then you can use them to apply much more pressure and to clamp down on the screw while you turn it.&lt;/p&gt;
&lt;h3&gt;Clamp the screw shaft in a drill chuck and turn slowly&lt;/h3&gt;
&lt;p&gt;The chuck of a drill is designed to hold the shaft of a drill bit securely, so it often also does a pretty good job of holding the shaft of a broken screw. Tighten up the chuck of the drill as hard as you can around the screw â you will need both hands for this so get someone to help by holding the drill in place as you do it. Donât plug the drill in until youâve finished clamping the screw, and make sure itâs in reverse  before you turn it on. Any cheap drill should work for this, or you can also use an electric screwdriver if it has a chuck. Donât try this trick with a rotary tool like a Dremel â they are designed for high-speed, low-torque so will be useless (but if you have a Dremel, see the next method!)&lt;/p&gt;
&lt;h3&gt;Use a rotary tool to cut a slot in the screw&lt;/h3&gt;
&lt;p&gt;If there is enough of the screw protruding above the surface itâs screwed into, you can use a Dremel or other rotary tool with a cut-off bit to cut a slot directly into the shaft, which you can then unscrew with a flat-head screwdriver. Make the cut as straight as you can. If there is plenty of shaft visible, then you can do the same with a hacksaw, but itâs much trickier â youâll need a very narrow blade and a steady hand.&lt;/p&gt;
&lt;h3&gt;Use epoxy to glue a nut onto the end&lt;/h3&gt;
&lt;p&gt;Two-part epoxy glue forms an incredibly strong bond, so you can use it to glue something onto the end of the screw that will give you enough grip to turn it. Use a type of epoxy designed for metal â J-B Weld is the strongest. The best thing to glue, if you have one, is a nut that just fits over the head of the screw. Position the nut over the head of the screw, then mix up the glue and use it to fill the gap between the nut and the screw. Be sure not to accidentally glue the screw to the surface that itâs stuck in! Wait for the glue to cure then use a spanner or socket to unscrew the screw using the nut.&lt;/p&gt;
&lt;p&gt;Other type of glue are not strong enough for this trick, so donât bother trying â you will just create a mess!&lt;/p&gt;
&lt;h3&gt;Weld a nut onto the end of the screw&lt;/h3&gt;
&lt;p&gt;A similar approach to number 4, but (if you have access to a welder) a much quicker one. Weld the end of the screw to something solid which you can use to grip it â a nut is perfect.&lt;/p&gt;
&lt;h3&gt;Use a screw extractor&lt;/h3&gt;
&lt;p&gt;This is bottom of the list because it involves buying a special bit of equipment â a screw extractor set. However, it really belongs at the top because it is the quickest, most reliable solution.  Screw extractors have a left-handed thread, which means that you put your drill into reverse and then start drilling into the broken screw. When the extractor has embedded itself in the screw, the left-hand rotation will neatly unscrew it. If youâre going to the trouble of buying a screw extractor, then you might as well buy a set, because (1) you wonât have to try to guess which size you need and (2) youâll have the correct tool on hand the next time you encounter a broken screw!&lt;/p&gt;</summary><category term="diy"></category><category term="stripped screws"></category><category term="threaded screws"></category><category term="protips"></category></entry><entry><title>How to build raiser legs for chairs or sofas</title><link href="http://mojones.net/how-to-build-raiser-legs-for-chairs-or-sofas.html" rel="alternate"></link><updated>2015-11-04T18:10:17+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:how-to-build-raiser-legs-for-chairs-or-sofas.html</id><summary type="html">&lt;p&gt;Recently I got a new set of sofas and armchairs to go in my living room. They were perfect apart from one small problem â the legs were too short. By that I mean that the underside of the sofas were too close to the ground to allow my Roomba vacuum cleaner to fit underneath. As you can see from this picture, a Roomba will happily clean underneath furniture, but only if thereâs enough room â in the case of my model, about three and a half inches (90mm).&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://web.archive.org/web/20120118043922im_/http://redrowstudio.com/wp-content/uploads/2011/12/roomba.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;I definitely wanted to make sure that my Roomba could fit underneath the new sofas â I have three dogs and hardwood floors, so hair will inevitably gather if itâs not being picked up. I started looking at chair raisers â there are some very nice hardwood ones available â but quickly realised that there were two problems. Firstly, I would need three sets, which would set me back the best part of $100. Secondly, thereâs no way to adjust the height â I wanted to raise my sofas and chairs up by only the minimum amount necessary. So I decided to make my own.&lt;/p&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;The basic plan is to use a hole saw to cut a bunch of circular wooden disks out of cheap timber planks, and then stack the disks together until theyâre the right height. Then, to securely hold the legs of the sofa, youâll cut a final disk with a cut-out section in the middle where the sofa leg will go. A photo of the rough finished product should make things clearer:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://web.archive.org/web/20120118043922im_/http://redrowstudio.com/wp-content/uploads/2011/12/P1140763.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;This one was made from 3/4 inch (18mm) planed timber, and I used three layers to give a total height of  2Â¼ inches (54mm). The top layer was made from the same piece of wood, but doesnât contribute to the height of the sofa â the sofa leg just sits in the round depression so that itâs held securely. This is the rough version â if youâre going to be able to see the leg raisers, you could sand the outside and stain or paint for a nicer finish.&lt;/p&gt;
&lt;h2&gt;Construction&lt;/h2&gt;
&lt;p&gt;The trick to cutting out these perfectly circular disks of wood is to use a hole saw -  a circular blade that fits into a normal drill and cuts round holes.&lt;/p&gt;
&lt;p&gt;For this project we need to cut two sizes of hole â a big one for the main layers, and a smaller one for the sofa/chair leg to fit into. Rather than buying two individual saws, itâs cheaper to buy a set that contains a range of sizes. Youâll also need an electric drill and some smooth planed timber â try to get a plank thatâs 3/4 inches thick and about 5 inches wide.&lt;/p&gt;
&lt;p&gt;Now, on to the cutting. Disclaimer: power tools are dangerous â take care!&lt;/p&gt;
&lt;p&gt;If you look at your hole saw, youâll see that the central drill bit protrudes a bit beyond the cutting saw part. The trick to cutting nice neat holes is to drill through your wood until the central bit emerges on the other side, but before the saw part has cut all the way through. Then, turn the wood over and finish off the cut from the other side, using the central hole to make sure that youâre cutting in exactly the same place. If you just cut all the way through from one side, then youâll get a load of splinters where the saw breaks through the wood. Most hole saws have a small hole in the back that you can use to poke out the circular disk if it is stuck â do this gently, as you donât want to dent the wood.&lt;/p&gt;
&lt;p&gt;While youâre cutting, watch out for any sign of overheating, like smoke. The friction between the saw and the wood can cause it to get very hot. Also, be careful not to touch the blade immediately after youâve finished a cut as it will probably be hot. A hole saw generates a large amount of sawdust â much more than normal drilling â so make sure you do it somewhere that will be easy to clean up. Also, when you're using the larger size hole saws, the torque on the drill is going to be much greater than when drilling a normal-sized hole, so don't break your wrist. If you have a drill press, use it. &lt;/p&gt;
&lt;p&gt;The easiest way to figure how how many layers you need is by trial and error. Cut out four disks using the largest hole saw in your set, and put them underneath the four legs of your sofa. If itâs still not high enough, cut another four and repeat. Be careful, because at this stage there is nothing holding the disks together, so they could easily slip.&lt;/p&gt;
&lt;p&gt;Once youâve got enough layers to raise your sofa to the right height, cut one more set of disks for the top layer that will hold the legs. Now comes the clever bit â we will use a hole saw to cut another disk from inside the first one, leaving us with a ring-shaped bit of wood that will hold the leg securely. The trick to this is to cut the inner hole just big enough to hold the existing sofa leg, so measure it and pick the hole saw from your set that is just big enough to fit. If your existing sofa leg is round, then just measure across it; if it is square then measure on the diagonal. If the size is in between two of your hole saws, then pick the smaller one and enlarge the inner hole after glueing. Use the drill bit hole in the centre of your wooden disk to make sure that you drill the inner hole in the exact middle. Youâll probably want to clamp the wooden disk when drilling it, as there might not be much clearance between the edges of the disk and the hole that youâre drilling.&lt;/p&gt;
&lt;p&gt;When all the drilling is done, youâll be left with a stack of wooden disks (3 in my case) and a wooden ring for each leg. Assemble each raiser by glueing the bottom of each disk to the top of the one below it, and glueing the bottom of the ring to the top of the uppermost disk (take a look back at the photo above to see what I mean).  Because youâve made the disks from planed wood, the tops and bottoms should be perfectly flat and easy to glue. And because youâve used a hole saw to make the disks they should all be exactly the same diameter, so it should be easy to get them to line up.&lt;/p&gt;
&lt;p&gt;Once the glue has dried, itâs time to check that the sofa legs fit into the depressions on the top of each raiser. If youâve cut the holes slightly too small, then the best way to enlarge them slightly is with a rotary tool like a Dremel with a drum sander.You could also use a round file or a piece of sandpaper, but it will take quite a lot longer! &lt;/p&gt;
&lt;p&gt;If necessary, you can tap the bottom of the raisers with a mallet to get them seated securely on the sofa legs â the slight friction between the leg and the wood will help to hold them on securely.&lt;/p&gt;
&lt;p&gt;Finally, finish the raisers however you like. I simply sanded the outside to a nice smooth finish, but if the raisers are going to be on display, then you could stain or paint them to match the rest of your furniture.&lt;/p&gt;</summary><category term="diy"></category><category term="furniture"></category><category term="sawdust"></category><category term="danger"></category></entry><entry><title>Which is harder, walking or flying?</title><link href="http://mojones.net/which-is-harder-walking-or-flying.html" rel="alternate"></link><updated>2015-11-04T18:10:13+00:00</updated><author><name>Martin</name></author><id>tag:mojones.net,2015-11-04:which-is-harder-walking-or-flying.html</id><summary type="html">&lt;p&gt;One of the nice things about having a reliable knowledge of the relationships between groups of organisms is that it lets us figure out when different traits have evolved. This can be of great practical importance â for instance, if we see that a particular mutation has evolved independently in several species that are all parasites, then it suggests that the mutation might be important for parasitism. It also lets us make more general statements about the history of life on earth â for example, we can say with great certainty that complex eyes have evolved independently multiple times.&lt;/p&gt;
&lt;p&gt;Another trait that has evolved multiple times is powered flight. We know that there are four groups of organisms that can fly â birds, bats, insects, and (extinct) pterosaurs. And we know that each of these groups evolved flight independently because, in each case, the most closely-related group cannot fly. For example, bats are most closely related to carnivores like dogs and cats than they are to any other flying animal. (The situation with birds is slightly more complex because their closest relatives are all extinct, but the principal is the same). We can be pretty confident that powered flight evolved independently four times.&lt;/p&gt;
&lt;p&gt;This seems on the low side; after all, many traits that sound just as complicated have evolved much more often than that â sophisticated eyes, complex social living arrangements (as seen in bees) and multicellularity have all been estimated to have arisen independently at least a dozen times. You might expect that something like flying, which offers such obvious benefits â escaping from predators; access to food; being able to migrate long distances â would have evolved many times as well. So why is it so uncommon? Perhaps it requires a degree of specialization that is rarely justified by the benefits it confers. Perhaps it requires a very unusual set of anatomical adaptations to happen simultaneously â this idea is given credence by the fact that gliding, as opposed to powered flight, has evolved independently many times. Maybe gliding offers enough of the benefits of flying, without the need for radical specialization, that it is more adaptive for the majority of animals.&lt;/p&gt;
&lt;p&gt;Of course, perhaps it only seems rare to us because of our land-bound nature â flying seems like a big deal because we canât do it. Letâs forget flying for a moment; how many times has walking evolved? Iâm going to rule out animals like tardigrades, that live in tiny films of water â they donât count. Neither do annelid worms; some of them have leg-like protuberances, but they still move by wiggling. By my count, walking has evolved independently just three times in the history of life â in arthropods (like insects and crustaceans), tetrapods (like humans and crocodiles) and velvet-worms (rather than try to describe them, &lt;a href="https://web.archive.org/web/20120127173552/http://en.wikipedia.org/wiki/Onychophora"&gt;hereâs a wikipedia link&lt;/a&gt;. In fact, it seems likely that velvet-worms and arthropods form a closely-related group, which means that walking has evolved independently just twice. So as per the title of this post walking is, from an evolutionary point of view, twice as difficult as flying!&lt;/p&gt;</summary><category term="biology"></category><category term="evolution"></category><category term="wild speculation"></category><category term="life on earth"></category></entry></feed>